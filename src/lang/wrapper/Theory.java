package lang.wrapper;

public class Theory {
    //래퍼 클래스 기본형의 한계
    //자바는 객체 지향 언어임, 따라서 이에 따른 기본형 int, double, long.. 등등 에는 한계가 있음.
    //1. 객체가 아님, 객체는 유용한 메서드를 제공할 수 있지만, 기본형은 그게 안됨 -> 메서드를 제공할 수 없음.
    //2. null값을 가질 수 없음 : 때로는 데이터에 없음을 표현하는 상태를 나타내야하는데 기본형에는 null값을 넣을수 없음.
    //예시로 (MyIntegerMain0, MyIntegerMethodMain1) 참조

    //래퍼 클래스 기본형의 한계2. null
    //기본형은 항상 값을 가져야 함. 그러나 때로는 데이터 없음이라는 상태가 필요할 수 있음.
    //(MyIntegerNullMain0,1)참조

    //자바 래퍼 클래스
    //지금까지 봤더 래퍼클래스는 기본형을 객체로 감싸서 더 편리하게 사용하도록 도와주기 때문에 상당히 유용.
    //래퍼 클래스는 == 기본형의 객체 버전이라고 생각해도 무방.
    //기본형을 대문자로 바꾸면 래퍼 클래스.
    //자바가 제공하는 래퍼 클래스 특징
    //1. 불변객체임.
    //2. 객체기때문에 equals비교를 해야함.

    //기본형을 래퍼클래스를 변형하는 것을 마치 박스에 물건을 넣는것과 유사하다고 생각하여 박싱이라 표현
    //new Integer(10)은 향후 자바에서 제거될 예정, 따라서 Integer.valueOf(10)사용을 권장.
    //Integer.valueOf()에는 최적화 기능이 있음
    //자주 쓰는 -128~127범위의 Integer클래스를 미리 생성해줌 해당 범위의 값을 조회하면 미리생성된 Integer객체를 반환해줌
    //해당 범위안에 값이 없으면 new Integer()를 호출 == 마치 문자열 풀과 비슷한 방식

    // inValue() 언박싱 래퍼클래스에 들어있는 기본형을 다시 꺼내는 메서드, 박스안의 물건을 꺼내는것 같다해서 언박싱임
    // 래퍼 클래스는 인스턴스이기 때문에 equals를 사용해서 비교,
    // 래퍼클래스는 toString()도 오버라이딩 해놨음.

    //래퍼 클래스 오토박싱
    //박싱 할때는 ==> Integer.valeOf()를 언박싱시에는 == intValue()메서드를.. 래퍼클래스를 사용할때마다
    //이런 메서드를 호출해야함 --> 개발자들이 귀찮다고 하소연 -> 그래서 자바5이상에서는 오토 박싱,언박싱 기능 제공
    //컴파일 단계에서 필요한 메서드 호출.

    //래퍼 클래스와 성능?
    //(WrapperVsPrimitive) 참조, 기본형이 래퍼보다는 약 5배 빠르게 나온것을 확인
    //그러면 래퍼 왜쓰냐? 성능 최적화 되는게 더 좋은거 아니냐?
    //유지보수 vs 최적화 과거 메모리 성능이 좋지 않았던 시절에는 성능에 초점을 두고 코드 작성을 하는 것이 맞았음
    //그러나 요즈 pc들 보면 굉장히 빠름, 성능차이가 5배 차이 난다고 해도, 1초냐 0.3초냐 뭐 크게 불편함을 느끼질 못할정도임
    //그래서 유지보수관점에 초점을두고 코드 작성하는 것이 좀더 바람직함.
    //불필요한 최적화 대신 성능 테스트후 진짜 문제가 발생하는 곳만 찾아 수정하는것을 권장.

    //Class 클래스 -> 클래스의 정보(메타데이터)를 다루는데 사용
    //1. 타입 정보 얻기 : 클래스의 이름, 슈퍼 클래스, 접근 제한자, 인터페이스 등등
    //2. 리플렉션 : 클래스의 정의된 필드, 메서드, 생성자등을 조회하고, 이들을 통해 인스턴스 생성 및 메서드 호출 가능.
    //3. 동적 로딩과 생성 : Class.forName()메서드를 활용하여 클래스를 동적으로 로딩, newInstance()메서드를 통해
    //새로운 인스턴스 생성 가능
    //4.애노테이션 처리 : 클래스에 적용된 애노테이션을 조회하고 처리하는 기능 제공.

    //System 클래스
    //시스템과 관련된 기본기능 제공

    //Math 클래스 수많은 수학 문제를 해결해주는 클래스 기능이 너무 많으니 이런게 있구나 정도만.
    //필요할때 api문서를 찾아보는거를 권장
 }
