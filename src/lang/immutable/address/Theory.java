package lang.immutable.address;

public class Theory {
    //불변객체

    //기본형과 참조형의 공유
    // 기본형 : 하나의 값을 여러 변수에서 절대로 공유하지 않음.
    // 참조형 : 하나의 객체를 참조값을 통해 여러 변수에서 전달.
    // (PrimitiveMain 참조).. (Address, RefMain_1)참조..

    // 공유 참조와 사이드 이펙트
    // side effect? ==> 프로그래밍에서 어떤 계산이 주된 작업외에 추가적인 부수효과를 일으키는 것
    // (RefMain_1)참조..
    // side effect는 부정적 의미.. side_effect가 발생하면, 디버깅이 어려워지고 코드의 안정성 저하.
    // side effect의 해결방안
    // 1.처음 부터 두 인스턴스가 서로다른 참조값을 지니게 하면 됨 == 인스턴스 생성을 서로다르게 해주는것.(RefMain_2)..
    // 그러나 참조형의 공유를 강제적으로 막을 방법이 없음..
    // side effect가 생기는 근본적인 원인은 결국 참조형에서 a,b가 변수 value를 공유하기때문에 발생했던 문제임
    // 따라서 이를 해결하기위해 서로다른 참조값을 바라보게하면 해결되는 문제긴 하나..
    // 자바 문법상 b=a;와 같은 공유에대해서 아무런 문법적 문제가 없으며..
    // 이러한 변수 공유를 강제적으로 막을 수 있는 방법이 없음.
    // 객체의 공유가 필요한 경우에는 공유를 하지만, 공유를 함으로써 side effect문제가 발생할 수 도 있다.
    // 개발자의 역량에 따라 잘 선별해내면 문제가 발생하진 않겠지만, 실무에서는 훨씬 복잡한 상황에서 이러한 문제가 발생함.
    // 공유참조를 강제적으로 막을 수 있는 방법이 없음
    // 그렇다면 공유참조를 통해 발생하는 side effect를 막을 수 있는 방법이 없나? 개발자가 조심해서 작성하는 법 뿐인가?

    // 불변 객체 도입
    // 지금까지 발생한문제? ==> 공유하면 안되는 객체를 변수에서 공유했기때문에 발생한 문제였음.
    // 정확하는 객체의 공유가 문제가 아닌 공유된 객체의 값을 변경하는데에서 발생
    Address a = new Address("서울"); // x001
    Address b = new Address("서울"); // x002

    Address c = new Address("서울");
    Address d = c;

    //분명 같은 코드이지만 위에 코드보다는 아래의 코드가 하나의 인스턴스를 사용하기 때문에 메모리상 더 효율적임
    //그러나 공유로 인해 side effect가 발생할 수 있음.
    //공유된 참조하는 인스턴스의 값을 변경하기 때문에 side effect가 발생
    //d의 값을 바꾸면 c의 값도 같이 바뀌는..
    //RefMain1참조.
    //사실 기존에 만들었던 ref시리즈에서도 setvalue 대신 생성자를 통한 값 변경을 해줘도 무방하지만.
    //개발자가 실수할 가능성이 있음.
    //불변객체는 setValue자체를 호출하면 컴파일오류가 나도록 제약을 걸어 이러한 실수를 아예하지 않도록 해줌.
    //적절한 제약임.
    //불변이라는 제약을 이욯해서 side effect라는 큰 문제를 막을 수 있음.

    //불변 객체 값 변경
    //불변 객체는 생성자를 통해 한번 값이 정해지면 어디서든 값을 변경할 수 없게 함
    //그럼에도 불변객체의 값을 변경해야하는 경우 어떤 메서드가 필요할까?
    // (change패키지 참조)

    // 실습 문제
    //(test 패키지 참조)
    // *기존 값을 유지한 상태로 새로운 값을 반황할때는 with을 주로 사용
    // set은 필드값을 바꾸는가 보구나라고 생각하기 때문에
    // 불변객체에서 새로운 값을 반환할때는 with~ 관례상 해주는게 좋다.


}
