package enumration;

public class Theory {
    //enum class -> 열거형
    //열거형이 생겨난 배경을 먼저 알아보자. (ex0)패키지 참조
    //String 타입으로 상태나 카테고리를 나타내면 타입의 안정성, 데이터 일관성이 부족해짐
    //이러한 문제를 해결하기 위해서는 범위를 제한 해야함.

    //위에서 발생한 문제를 static final String ==> 문자열 상수로 해결하고자 했음(ex1참조)
    //그러나 근본적인 해결책은 되지 못함.
    //상수를 통해 StringGrade.~ 접근을 통해 오타 발생을 최소화 시켜줄순 있었으나.
    //이를 인지 못한 개발자가 또 다른 String타입으로 넘길수 있는 것을 원천적으로 막지 못했음.
    //이는 클래스 설계자 잘못.
    //애초에 Basic,gold,Silver말고는 다른 어떤것도 접근할 수 없는 기법을 써서 설계했어야 했음.

    //타입 안전 열거형 패턴(Type-safe-enum-pattern)
    //지금 까지 문제를 해결하기 위해 나온 결과가 바로 타입 안전 열거형 패턴임
    //enum == enumration의 줄임말 == 우리말로 열거라는 뜻 어떤 항목을 나열
    //우리가 작성한코드에서의 나열은 BASIC,GOLD,DIAMOND 를 나열하는 것. ->나열한 항목이 아닌것은 사용 불가
    //즉, String처럼 아무런 문자열이나 다 사용할 수 있는게 아닌, 우리가 나열한 항목인
    //BASIC,GOLD,DIAMOND만 안전하게 사용할 수 있음을 나타냄.(ex2)참조
    //선언은 public static final Class명 대문자 변수명 = 클래스명()
    //개발자가 실수로 또 객체를 생성할 수 있기때문에 prviate로 생성자 생성을 막아줘야 함
    //그러나 등급이 추가될수록 코드가 길어지고 해당 패턴에는 불편함이 있음 그럼에도 많은 개발자들이 이러한 패턴을 많이 사용
    //그래서 자바에서 이러한 불편함을 덜어주고자 enum Type을 제공
    //장점
    //타입 안정성 향상
    //데이터 일관성
    //제한된 인스턴스 생성
    //타입 안정성

    //enum Type(열거형 타입)\(ex3)참조
    //타입 안정 열거형 패턴을 쉽게 사용할 수 있도록 자바에서 지원 체감상 매우 좋음
    //열거형을 정의할때는 class대신 enum으로 정의
    //enum을 정의하고 원하는 상수의 이름을 나열하면 끝.
    //ex. Basic == public static final Grade BASIC = New Grade(); == 같은 역할을 해줌
    //열거형도 클래스임
    //열거형은 자동으로 java.lang.Enum을 상속받음 == extends Enum임
    //외부에서 임의 생성 불가 private Grade() ~~같은 의미
    //enum은 참고로 toString도 메서드 오버라이딩 해놓음 따라서 참조값을 보고싶으면 참조값을 얻는 메서드를 제작 해야함.
    //참고로 열거형은 switch문에 적용 가능
    //열거형의 장점 : 타입 안정성 향상
    //간결성 및 일관성
    //확장성 : 새로운 등급을 추가하고 싶으면 enum열거에 등급을 하나 추가하기만 하면 끝
    //열거형의 변수는 상수 취급이기 때문에 static임포트를 적절하게 사용하면 더 가독성 좋은 코드가 나옴

    //열거형의 주요 메서드(ex3패키지 참조)
    //Enum은 기본적으로 java.lang.Enum을 상속받기때문에 해당 클래스가 제공하는 메서드를 이용할 수 있음.
    //values() : 모든 열거형 상수를 포함하는 배열 반환
    //valueOf(String name) : 주어진 이름과 일치하는 Enum상수 반환
    //name():Enum 상수의 이름을 문자열로 반환
    //ordianl() : enum 상수의 선언 순서 0부터 반환
    //toString() : enum 상수의 이름을 문자열로 반환, name메서드와 유사하지만 toString은 오버라이딩 가능
    //*ordinal을 가급적 사용하지 않는 것이 좋음
    //db 연동시 실버등급 = 1 골드 등급 = 2 인 ordinal값을 저장하고 있는데 등급이 추가되어 ordinal값이 밀려버리면
    //기존 gold 등급이 실버 등급으로 바뀌는 기적을 볼 수 있음.
    //열거형은 이미 java.lang.Enum을 상속받고 있기때문에 추가로 다른 클래스 상속 불가
    //열거형은 인터페이스 구현 가능
    //열거형에 추상메서드를 선언하고 구현 가능
    // 이 경우 익명 클래스와 같은 방식을 사용 ==> 추후 배울 예정
}
